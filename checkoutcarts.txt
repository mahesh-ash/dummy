package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import model.CartItem;
import utils.DBUtils;

public class CartDao implements CartInterface {

    public CartDao() {
    	
    }

   @Override
    public void addToCart(int userId, int productId, int qty) throws SQLException {
        String select = "SELECT cart_id, quantity FROM Ecommerce_Website.D_D_CART WHERE user_id=? AND product_id=?";
        String insert = "INSERT INTO Ecommerce_Website.D_D_CART (user_id, product_id, quantity) VALUES (?,?,?)";
        String update = "UPDATE Ecommerce_Website.D_D_CART SET quantity = ?, updatedat = GETDATE() WHERE cart_id = ?";
        try (Connection conn = DBUtils.getConnection();
             PreparedStatement ps = conn.prepareStatement(select)) {
            ps.setInt(1, userId);
            ps.setInt(2, productId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int cartId = rs.getInt("cart_id");
                    int existing = rs.getInt("quantity");
                    try (PreparedStatement psu = conn.prepareStatement(update)) {
                        psu.setInt(1, existing + qty);
                        psu.setInt(2, cartId);
                        psu.executeUpdate();
                    }
                    return;
                }
            }
            try (PreparedStatement psi = conn.prepareStatement(insert)) {
                psi.setInt(1, userId);
                psi.setInt(2, productId);
                psi.setInt(3, qty);
                psi.executeUpdate();
            }
        }
    }
	@Override
    public void updateQuantity(int userId, int productId, int qty) throws SQLException {
        String update = "UPDATE Ecommerce_Website.D_D_CART SET quantity = ?, updatedat = GETDATE() WHERE user_id=? AND product_id=?";
        try (Connection conn = DBUtils.getConnection(); PreparedStatement ps = conn.prepareStatement(update)) {
            ps.setInt(1, qty);
            ps.setInt(2, userId);
            ps.setInt(3, productId);
            ps.executeUpdate();
        }
    }

	@Override
    public void removeFromCart(int userId, int productId) throws SQLException {
        String del = "DELETE FROM Ecommerce_Website.D_D_CART WHERE user_id=? AND product_id=?";
        try (Connection conn = DBUtils.getConnection(); PreparedStatement ps = conn.prepareStatement(del)) {
            ps.setInt(1, userId);
            ps.setInt(2, productId);
            ps.executeUpdate();
        }
    }
	
	
	  @Override
	    public void removeItemsFromCart(int userId, List<Integer> productIds) throws SQLException {
	        if (productIds == null || productIds.isEmpty()) return;


	        String placeholders = String.join(",", Collections.nCopies(productIds.size(), "?"));
	        String sql = "DELETE FROM Ecommerce_Website.D_D_CART WHERE user_id = ? AND product_id IN (" + placeholders + ")";
	        try (Connection conn = DBUtils.getConnection();
	             PreparedStatement ps = conn.prepareStatement(sql)) {
	            ps.setInt(1, userId);
	            int idx = 2;
	            for (Integer pid : productIds) {
	                ps.setInt(idx++, pid);
	            }
	            ps.executeUpdate();
	        }
	    }

	@Override
    public List<CartItem> getCartItems(int userId) throws SQLException {
        List<CartItem> list = new ArrayList<>();
        String sql = "SELECT c.product_id, c.quantity, p.product_name, p.price, p.image " +
                     "FROM Ecommerce_Website.D_D_CART c LEFT JOIN Ecommerce_Website.M_S_DATAS p ON c.product_id = p.product_id " +
                     "WHERE c.user_id = ?";
        try (Connection conn = DBUtils.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, userId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    int pid = rs.getInt("product_id");
                    int qty = rs.getInt("quantity");
                    String name = rs.getString("product_name");
                    double price = rs.getDouble("price");
                    String image = rs.getString("image");
                    list.add(new CartItem(pid, name, price, image, qty));
                }
            }
        }
        return list;
    }
   @Override 
	public void clearCart(int userId) throws SQLException {
        String del = "DELETE FROM Ecommerce_Website.D_D_CART WHERE user_id=?";
        try (Connection conn = DBUtils.getConnection(); 
        	PreparedStatement ps = conn.prepareStatement(del)) {
            ps.setInt(1, userId);
            ps.executeUpdate();
        }
    }
   
   public void reorderItems(int userId, int orderId) throws SQLException {
       String itemsSql = "SELECT product_id, quantity FROM Ecommerce_Website.D_D_ORDERLOGS WHERE order_id = ?";
       String addToCartSql = "MERGE INTO Ecommerce_Website.D_D_CART AS target " +
                             "USING (VALUES (?, ?, ?)) AS source (user_id, product_id, quantity) " +
                             "ON target.user_id = source.user_id AND target.product_id = source.product_id " +
                             "WHEN MATCHED THEN UPDATE SET target.quantity = target.quantity + source.quantity " +
                             "WHEN NOT MATCHED THEN INSERT (user_id, product_id, quantity) VALUES (source.user_id, source.product_id, source.quantity);";

       try (Connection conn = DBUtils.getConnection()) {
           conn.setAutoCommit(false);
           
           try (PreparedStatement itemsPs = conn.prepareStatement(itemsSql);
                PreparedStatement addToCartPs = conn.prepareStatement(addToCartSql)) {
               
               itemsPs.setInt(1, orderId);
               
               try (ResultSet rs = itemsPs.executeQuery()) {
                   while (rs.next()) {
                       int productId = rs.getInt("product_id");
                       int quantity = rs.getInt("quantity");

                       addToCartPs.setInt(1, userId);
                       addToCartPs.setInt(2, productId);
                       addToCartPs.setInt(3, quantity);
                       addToCartPs.executeUpdate();
                   }
               }
           }
           conn.commit();
       } catch (SQLException e) {
           throw e;
       }
   }
}
package dao;

import model.Order;
import model.OrderItem;
import utils.DBUtils;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class OrderDao {


    public static List<Order> getOrderHistory(int userId) throws SQLException {
        List<Order> orders = new ArrayList<>();
        String ordersSql = "SELECT * FROM Ecommerce_Website.D_D_ORDER WHERE user_id = ? ORDER BY orderdate DESC";
        
        try (Connection conn = DBUtils.getConnection();
             PreparedStatement ps = conn.prepareStatement(ordersSql)) {
            
            ps.setInt(1, userId);
            
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Order order = new Order();
                    order.setOrderId(rs.getInt("order_id"));
                    order.setUserId(rs.getInt("user_id"));
                    order.setTotalAmount(rs.getDouble("total_amount"));
                    order.setOrderDate(rs.getTimestamp("orderdate"));
                    order.setStatus(rs.getString("status"));

                    order.setItems(getOrderItems(conn, order.getOrderId()));
                    orders.add(order);
                }
            }
        }
        return orders;
    }



    private static List<OrderItem> getOrderItems(Connection conn, int orderId) throws SQLException {
        List<OrderItem> items = new ArrayList<>();
        String itemsSql = "SELECT ol.*, p.product_name FROM Ecommerce_Website.D_D_ORDERLOGS ol " +
                          "JOIN Ecommerce_Website.M_S_DATAS p ON ol.product_id = p.product_id " +
                          "WHERE ol.order_id = ?";

        
        try (PreparedStatement ps = conn.prepareStatement(itemsSql)) {
            ps.setInt(1, orderId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    OrderItem item = new OrderItem();
                    item.setOrderLogId(rs.getInt("id"));
                    item.setOrderId(rs.getInt("order_id"));
                    item.setProductId(rs.getInt("product_id"));
                    item.setProductName(rs.getString("product_name"));
                    item.setQuantity(rs.getInt("quantity"));
                    item.setPrice(rs.getDouble("price"));
                    item.setTotal(rs.getDouble("total"));
                    items.add(item);
                }
            }
        }
        return items;
    }
}

package dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.Product;
import utils.DBUtils;
public class ProductDao<getProductsByCategoryId> implements ProductInterface {

    @Override
    public List<Product> getAllProducts() {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM Ecommerce_Website.M_S_DATAS";
        try (Connection conn = DBUtils.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                Product product = new Product(
                    rs.getInt("product_id"),
                    rs.getInt("category_id"),
                    rs.getString("product_name"),
                    rs.getString("description"),
                    rs.getDouble("price"),
                    rs.getInt("stock"),
                    rs.getString("image")
                );
                products.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }

    @Override
    public List<Product> getProductsByCategoryId(int categoryId) {
        ArrayList<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM Ecommerce_Website.M_S_DATAS WHERE category_id = ?";
        try (Connection conn = DBUtils.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, categoryId);

            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Product product = new Product(
                        rs.getInt("product_id"),
                        rs.getInt("category_id"),
                        rs.getString("product_name"),
                        rs.getString("description"),
                        rs.getDouble("price"),
                        rs.getInt("stock"),
                        rs.getString("image")
                    );
                    products.add(product);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }
    


	@Override
    public List<Product> searchProductsByName(String query) {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM Ecommerce_Website.M_S_DATAS WHERE product_name LIKE ?";
        try (Connection conn = DBUtils.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, "%" + query + "%");
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Product product = new Product(
                        rs.getInt("product_id"),
                        rs.getInt("category_id"),
                        rs.getString("product_name"),
                        rs.getString("description"),
                        rs.getDouble("price"),
                        rs.getInt("stock"),
                        rs.getString("image")
                    );
                    products.add(product);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }
   @Override
    public List<Product> searchProductsByCategoryAndName(int categoryId, String query) {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM Ecommerce_Website.M_S_DATAS WHERE category_id = ? AND product_name LIKE ?";
        try (Connection conn = DBUtils.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, categoryId);
            ps.setString(2, "%" + query + "%");
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Product product = new Product(
                        rs.getInt("product_id"),
                        rs.getInt("category_id"),
                        rs.getString("product_name"),
                        rs.getString("description"),
                        rs.getDouble("price"),
                        rs.getInt("stock"),
                        rs.getString("image")
                    );
                    products.add(product);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }
   
   public List<Product> getFilteredProducts(Integer categoryId, String query, String filter) {
       List<Product> products = new ArrayList<>();
       StringBuilder sql = new StringBuilder("SELECT * FROM Ecommerce_Website.M_S_DATAS WHERE 1=1");

       if (categoryId != null) sql.append(" AND category_id = ?");
       if (query != null && !query.isEmpty()) sql.append(" AND (LOWER(product_name) LIKE ? OR LOWER(description) LIKE ?)");

       if (filter != null) {
           switch (filter) {
               case "low-high": sql.append(" ORDER BY price ASC"); break;
               case "high-low": sql.append(" ORDER BY price DESC"); break;
             
           }
       }

       try (Connection conn = DBUtils.getConnection();
            PreparedStatement ps = conn.prepareStatement(sql.toString())) {

           int i = 1;
           if (categoryId != null) ps.setInt(i++, categoryId);
           if (query != null && !query.isEmpty()) {
               String like = "%" + query.toLowerCase() + "%";
               ps.setString(i++, like);
               ps.setString(i++, like);
           }

           try (ResultSet rs = ps.executeQuery()) {
               while (rs.next()) products.add(mapProduct(rs));
           }

       } catch (SQLException e) { e.printStackTrace(); }
       return products;
   }
   private Product mapProduct(ResultSet rs) throws SQLException {
       return new Product(
           rs.getInt("product_id"),
           rs.getInt("category_id"),
           rs.getString("product_name"),
           rs.getString("description"),
           rs.getDouble("price"),
           rs.getInt("stock"),
           rs.getString("image")
         
       );
   }


    
    
}



package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import model.User;
import utils.DBUtils;

public class UserDao {

    public boolean registerUser(User u) {
        String sql = "INSERT INTO Ecommerce_Website.M_S_USER(fullname, email, phone, password, address, pincode) VALUES(?,?,?,?,?,?)";
        try (Connection c = DBUtils.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            System.out.println("Connection Executed Successfully");
            ps.setString(1, u.getName());
            ps.setString(2, u.getEmail());
            ps.setString(3, u.getMobile());
            ps.setString(4, u.getPassword());
            ps.setString(5, u.getAddress());
            ps.setInt(6, u.getPinCode());
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    public String isValid(String email, String password) {
        String status = "Invalid Username or Password";
        String sql = "SELECT * FROM Ecommerce_Website.M_S_USER WHERE email=? AND password=?";
        try (Connection conn = DBUtils.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, email);
            ps.setString(2, password);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                status = "valid";
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return status;
    }


    public User getUserDetails(String email) {
        User user = null;
        String sql = "SELECT user_id, fullname, phone, email, address, pincode, password FROM Ecommerce_Website.M_S_USER WHERE email=?";
        try (Connection conn = DBUtils.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                user = new User();
                user.setId(rs.getInt("user_id"));
                user.setName(rs.getString("fullname"));
                user.setMobile(rs.getString("phone"));
                user.setEmail(rs.getString("email"));
                user.setAddress(rs.getString("address"));
                user.setPinCode(rs.getInt("pincode"));
                user.setPassword(rs.getString("password"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return user;
    }
    

    public static User getUserByEmail(String email) throws SQLException {
        User user = null;
        String sql = "SELECT id, fullname, phone, address, pincode, password FROM Ecommerce_Website.M_S_USER WHERE email = ?"; 
        try (Connection conn = DBUtils.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    user = new User();
                    user.setId(rs.getInt("id"));
                    user.setEmail(email);
                    user.setName(rs.getString("fullname"));
                    user.setMobile(rs.getString("phone"));
                    user.setAddress(rs.getString("address"));
                    user.setPinCode(rs.getInt("pincode"));
                    user.setPassword(rs.getString("password"));
                }
            }
        }
        return user;
    }

    public boolean updateUser(User user) throws SQLException {
        String sql = "UPDATE Ecommerce_Website.M_S_USER SET fullname=?, phone=?, address=?, pincode=?, updatedat=GETDATE() WHERE user_id=?";
        try (Connection c = DBUtils.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            
            ps.setString(1, user.getName());
            ps.setString(2, user.getMobile());
            ps.setString(3, user.getAddress());
            ps.setInt(4, user.getPinCode());
            ps.setInt(5, user.getId());

            int rowsAffected = ps.executeUpdate();
            return rowsAffected > 0;
        }
    }
    }package model;


public class CartItem {
    public int productId;
    public String name;
    public double price;
    public String image;
    public int qty;

    public CartItem() {
    	
    }

    public CartItem(int productId, String name, double price, String image, int qty) {
        this.productId = productId;
        this.name = name;
        this.price = price;
        this.image = image;
        this.qty = qty;
    }

	public int getProductId() {
		return productId;
	}

	public void setProductId(int productId) {
		this.productId = productId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getPrice() {
		return price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	public String getImage() {
		return image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	public int getQty() {
		return qty;
	}

	public void setQty(int qty) {
		this.qty = qty;
	}
}
package model;

import java.util.Date;
import java.util.List;

public class Order {
    private int orderId;
    private int userId;
    private double totalAmount;
    private Date orderDate;
    private String status;
    private List<OrderItem> items;
	public int getOrderId() {
		return orderId;
	}
	public void setOrderId(int orderId) {
		this.orderId = orderId;
	}
	public int getUserId() {
		return userId;
	}
	public void setUserId(int userId) {
		this.userId = userId;
	}
	public double getTotalAmount() {
		return totalAmount;
	}
	public void setTotalAmount(double totalAmount) {
		this.totalAmount = totalAmount;
	}
	public Date getOrderDate() {
		return orderDate;
	}
	public void setOrderDate(Date orderDate) {
		this.orderDate = orderDate;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public List<OrderItem> getItems() {
		return items;
	}
	public void setItems(List<OrderItem> items) {
		this.items = items;
	}



}

package model;

public class OrderItem {
    private int orderLogId;
    private int orderId;
    private int productId;
    private String productName;
    private int quantity;
    private double price;
    private double total;
	public int getOrderLogId() {
		return orderLogId;
	}
	public void setOrderLogId(int orderLogId) {
		this.orderLogId = orderLogId;
	}
	public int getOrderId() {
		return orderId;
	}
	public void setOrderId(int orderId) {
		this.orderId = orderId;
	}
	public int getProductId() {
		return productId;
	}
	public void setProductId(int productId) {
		this.productId = productId;
	}
	public String getProductName() {
		return productName;
	}
	public void setProductName(String productName) {
		this.productName = productName;
	}
	public int getQuantity() {
		return quantity;
	}
	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public double getTotal() {
		return total;
	}
	public void setTotal(double total) {
		this.total = total;
	}


   
}package model;

import java.util.ArrayList;
import java.util.List;

public class Paymentrequest {
    private Double amount;
    private String cardHolder;
    private String cardLast4;
    private String expMonth;
    private String expYear;
    private List<Integer> selectedItems = new ArrayList<>();


    public Paymentrequest() {
        super();
    }

    public Paymentrequest(Double amount, String cardHolder, String cardLast4, String expMonth, String expYear) {
        super();
        this.amount = amount;
        this.cardHolder = cardHolder;
        this.cardLast4 = cardLast4;
        this.expMonth = expMonth;
        this.expYear = expYear;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }

    public String getCardHolder() {
        return cardHolder;
    }

    public void setCardHolder(String cardHolder) {
        this.cardHolder = cardHolder;
    }

    public String getCardLast4() {
        return cardLast4;
    }

    public void setCardLast4(String cardLast4) {
        this.cardLast4 = cardLast4;
    }

    public String getExpMonth() {
        return expMonth;
    }

    public void setExpMonth(String expMonth) {
        this.expMonth = expMonth;
    }

    public String getExpYear() {
            return expYear;
    }

    public void setExpYear(String expYear) {
        this.expYear = expYear;
    }

    public List<Integer> getSelectedItems() {
        return selectedItems;
    }

    public void setSelectedItems(List<Integer> selectedItems) {
        this.selectedItems = selectedItems;
    }
}
package model;

public class Product {
    private int productId;
    private int categoryId;
    private String productName;
    private String description;
    private double price;
    private int stock;
    private String imageUrl;

    public Product() {
    }


    public Product(int categoryId, String productName, String description, double price, int stock, String imageUrl) {
        this.categoryId = categoryId;
        this.productName = productName;
        this.description = description;
        this.price = price;
        this.stock = stock;
        this.imageUrl = imageUrl;
    }


    public Product(int productId, int categoryId, String productName, String description, double price, int stock, String imageUrl) {
        this.productId = productId;
        this.categoryId = categoryId;
        this.productName = productName;
        this.description = description;
        this.price = price;
        this.stock = stock;
        this.imageUrl = imageUrl;
    }

    // Getters and setters
    public int getProductId() {
        return productId;
    }

    public void setProductId(int productId) {
        this.productId = productId;
    }

    public int getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(int categoryId) {
        this.categoryId = categoryId;
    }

    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getStock() {
        return stock;
    }

    public void setStock(int stock) {
        this.stock = stock;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }
}
package model;

public class User {

     private int id;
	 private String name;
	 private String mobile;
	 private String email;
	 private String address;
	 private int pinCode;
	 private String password;
	 
	 public User() {
		 
	 }

	public User( String name, String mobile, String email, String address, int pinCode, String password) {
		this.name = name;
		this.mobile = mobile;
		this.email = email;
		this.address = address;
		this.pinCode = pinCode;
		this.password = password;
	}
	public User(int id, String name, String mobile, String email, String address, int pinCode, String password) {
		this.id=id;
		this.name = name;
		this.mobile = mobile;
		this.email = email;
		this.address = address;
		this.pinCode = pinCode;
		this.password = password;
	}





	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getMobile() {
		return mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public int getPinCode() {
		return pinCode;
	}

	public void setPinCode(int pinCode) {
		this.pinCode = pinCode;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}



	

}
package servlets;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import dao.CartDao;
import model.CartItem;

@WebServlet("/CartServlet")
public class CartServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private Gson gson = new GsonBuilder().setPrettyPrinting().create();
    private CartDao cartDao = new CartDao();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    	System.out.println("Do get method invoked");
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        

        HttpSession session = request.getSession(false);
        int userId = (Integer) session.getAttribute("userId");
        
        try {
            List<CartItem> items = cartDao.getCartItems(userId);
            response.getWriter().print(gson.toJson(items));
            
        } catch (SQLException e) {
        	System.out.println("Error occured: " + e.getMessage());
            response.setStatus(500);
            response.getWriter().print("{\"error\":\"DB error\"}");
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        

        HttpSession session = request.getSession(false);
        int userId = (Integer) session.getAttribute("userId");
        System.out.println(userId);
        try {
            if ("add".equals(action)) {
                int productId = Integer.parseInt(request.getParameter("productId"));
                int qty = 1;
                try { 
                	qty = Integer.parseInt(request.getParameter("qty")); 
                	} catch (NumberFormatException e) {

                        System.out.println("Invalid quantity, using default 1.");
                	}
                cartDao.addToCart(userId, productId, qty);
                System.out.println("add block entered");
            }
            else if ("update".equals(action)) {
            	System.out.println("update block entered");
                int productId = Integer.parseInt(request.getParameter("productId"));
                int qty = Integer.parseInt(request.getParameter("qty"));
                cartDao.updateQuantity(userId, productId, qty);
            }
            else if ("remove".equals(action)) {
            	System.out.println("remove block entered");
                int productId = Integer.parseInt(request.getParameter("productId"));
                cartDao.removeFromCart(userId, productId);
            } 
            else if ("clear".equals(action)) {
            	System.out.println("clear block entered");
                cartDao.clearCart(userId);
            }
            
            List<CartItem> items = cartDao.getCartItems(userId);
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().print(gson.toJson(items));
        } catch (SQLException e) {
            System.out.println("Error occurred: " + e.getMessage());
            response.setStatus(500);
            response.getWriter().print("{\"error\":\"DB error\"}");
        }
    }
}
package servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import utils.DBUtils;

@WebServlet("/ChangeServlet")
public class ChangeServlet extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse res)
            throws ServletException, IOException {

        res.setContentType("text/html");
        PrintWriter out = res.getWriter();

        HttpSession session = req.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            out.println("<h3>You must be logged in to change your password.</h3>");
            return;
        }
        String email = (String) session.getAttribute("userEmail");
        System.out.println(email);

        String newPass = req.getParameter("newPassword");
        String confirmPass = req.getParameter("confirmPassword");
        
        if(!newPass.equals(confirmPass)) {
        	 out.println("<h3>Error: passwords do not match</h3>");
        	 return ;
        }
        if ( newPass == null || newPass.trim().isEmpty()) {
            out.println("<h3>Error: All password fields are required.</h3>");
            return;
        }

        System.out.println("User trying to change password: " + email);

        try (Connection con = DBUtils.getConnection()) {
            String selectSql = "SELECT password FROM Ecommerce_Website.M_S_USER WHERE email=?";
            try (PreparedStatement ps = con.prepareStatement(selectSql)) {
                ps.setString(1, email);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                    	System.out.println("Entered");
                        String updateSql = "UPDATE Ecommerce_Website.M_S_USER SET password=? WHERE email=?";
                        try (PreparedStatement update = con.prepareStatement(updateSql)) {
                            update.setString(1, newPass);
                            update.setString(2, email);
                            update.executeUpdate();
                            out.println("<h3>Password changed successfully!</h3>");
                        }
                    } 
                }
            }
        } catch (Exception e) {
            e.printStackTrace(out);
            out.println("<h3>An error occurred during password change.</h3>");
        }
    }
}
package servlets;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@WebFilter("/CartServlet")
public class LoginFilter implements Filter {

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 
        throws IOException, ServletException {
        
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;
        
        HttpSession session = httpRequest.getSession(false); 
        

        boolean isLoggedIn = (session != null && session.getAttribute("userId") != null);
        
        if (isLoggedIn) {
            System.out.println("User loged in");
            chain.doFilter(request, response);
        } else {

            System.out.println("LoginFilter: User not logged in, redirecting to login page.");
            httpResponse.sendRedirect(httpRequest.getContextPath() + "Html/login.html");
            System.out.println(httpRequest.getContextPath() + "Html/login.html");
        }
    }

    public void init(FilterConfig fConfig) throws ServletException {

    }

    public void destroy() {

    }
}package servlets;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.google.gson.JsonObject;

import dao.UserDao;
import model.User;

@WebServlet("/LoginServlet")
public class LoginServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json");
        JsonObject jsonResponse = new JsonObject();
        
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        
        UserDao userService = new UserDao();
        String status = userService.isValid(email, password);

        if ("valid".equalsIgnoreCase(status)) {
            User user = userService.getUserDetails(email);
            HttpSession session = request.getSession();
            

            session.setAttribute("userId", user.getId()); 
            session.setAttribute("user", user);
            session.setAttribute("userEmail", email);
            
            jsonResponse.addProperty("status", "success");
            jsonResponse.addProperty("redirectUrl", "navbar.html");
        } else {
            System.out.println("entered");
            jsonResponse.addProperty("status", "error");
            jsonResponse.addProperty("redirectUrl", "login.html?error=Registration failed. Please sign up.");
        }
        
        response.getWriter().write(jsonResponse.toString());
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }
}package servlets;

import com.google.gson.Gson;

import dao.OrderDao;
import model.User;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/OrderHistoryServlet")
public class OrderHistoryServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private final Gson gson = new Gson();
    private final OrderDao orderDao = new OrderDao();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        HttpSession session = request.getSession(false);

        if (session == null || session.getAttribute("user") == null) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("{\"error\":\"Not logged in.\"}");
            return;
        }

        User user = (User) session.getAttribute("user");
        try {
            response.getWriter().write(gson.toJson(OrderDao.getOrderHistory(user.getId())));
        } catch (SQLException e) {
            log("Database error retrieving order history", e);
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\":\"Internal server error.\"}");
        }
    }
}
package servlets;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import model.CartItem;
import model.User;
import model.Paymentrequest;
import dao.CartDao;
import utils.DBUtils;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.sql.*;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@WebServlet("/PaymentServlet")
public class PaymentServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private final Gson gson = new Gson();
    private final CartDao cartDao = new CartDao();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("PaymentServlet initiated.");
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        JsonObject out = new JsonObject();

        HttpSession session = request.getSession(false);
        if (session == null) {
            System.out.println("Session is null, not logged in.");
            sendError(response, out, "Not logged in", HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }

        Object userObj = session.getAttribute("user");
        if (!(userObj instanceof User)) {
            System.out.println("User not found in session or invalid type.");
            sendError(response, out, "User not logged in or session expired", HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }

        User user = (User) userObj;
        int userId = user.getId();
        String userEmail = user.getEmail();

        if (userId <= 0) {
            System.out.println("Could not determine user id.");
            sendError(response, out, "Could not determine user id", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return;
        }

        System.err.println("Processing payment for user ID: " + userId + " (Email: " + userEmail + ")");

        Paymentrequest payReq;
        try (BufferedReader br = request.getReader()) {
            payReq = gson.fromJson(br, Paymentrequest.class);
        } catch (Exception e) {
            System.out.println("Error parsing payment request.");
            log("Error parsing payment request", e);
            sendError(response, out, "Invalid JSON payload", HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        
        System.out.println(payReq+" "+payReq.getAmount()+" "+ payReq.getSelectedItems()+" "+ payReq.getSelectedItems().size());

        if (payReq == null || payReq.getAmount() == null || payReq.getSelectedItems() == null || payReq.getSelectedItems().isEmpty()) {
            System.out.println("Invalid payload: missing amount or selected items.");
            sendError(response, out, "Invalid payload", HttpServletResponse.SC_BAD_REQUEST);
            return;
        }

        List<Integer> selectedProductIds = payReq.getSelectedItems();

        List<CartItem> itemsInCart;
        try {
            itemsInCart = cartDao.getCartItems(userId);
            System.out.println("Found " + itemsInCart.size() + " items in cart for user ID: " + userId);
        } catch (SQLException e) {
            log("Database error retrieving cart items", e);
            sendError(response, out, "Database error: " + e.getMessage(), HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return;
        }

        List<CartItem> checkoutItems = itemsInCart.stream()
                .filter(item -> selectedProductIds.contains(item.getProductId()))
                .collect(Collectors.toList());

        if (checkoutItems.isEmpty()) {
            System.out.println("No selected items found in the cart.");
            sendError(response, out, "No items selected for checkout", HttpServletResponse.SC_BAD_REQUEST);
            return;
        }

        Connection conn = null;
        try {
            conn = DBUtils.getConnection();
            conn.setAutoCommit(false);

            int orderId = createOrder(conn, userId, payReq.getAmount());
            createOrderLogs(conn, orderId, checkoutItems);
            clearSelectedCartItems(conn, userId, selectedProductIds);

            conn.commit();
            out.addProperty("status", "ok");
            out.addProperty("orderId", orderId);
            out.addProperty("message", "Payment simulated and order placed for selected items.");
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().write(out.toString());
        } catch (SQLException e) {
            System.out.println("Transaction failed.");
            log("Transaction failed", e);
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    log("Rollback failed", ex);
                }
            }
            sendError(response, out, "Payment failed: " + e.getMessage(), HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    log("Connection close failed", e);
                }
            }
        }
    }

    private void sendError(HttpServletResponse response, JsonObject jsonObject, String message, int statusCode) throws IOException {
        jsonObject.addProperty("status", "error");
        jsonObject.addProperty("message", message);
        response.setStatus(statusCode);
        response.getWriter().write(jsonObject.toString());
    }

    private int createOrder(Connection conn, int userId, double totalAmount) throws SQLException {
        String insertOrderSql = "INSERT INTO Ecommerce_Website.D_D_ORDER (user_id, total_amount, orderdate, status) VALUES (?, ?, GETDATE(), ?)";
        System.out.println("Attempting to insert order.");
        try (PreparedStatement ps = conn.prepareStatement(insertOrderSql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setInt(1, userId);
            ps.setDouble(2, totalAmount);
            ps.setString(3, "Paid");
            int affected = ps.executeUpdate();
            if (affected == 0) throw new SQLException("Creating order failed, no rows affected.");

            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return generatedKeys.getInt(1);
                } else {
                    throw new SQLException("Creating order failed, no ID obtained.");
                }
            }
        }
    }

    private void createOrderLogs(Connection conn, int orderId, List<CartItem> items) throws SQLException {
        String insertOrderLogSql = "INSERT INTO Ecommerce_Website.D_D_ORDERLOGS (order_id, product_id, quantity, price, total) VALUES (?, ?, ?, ?, ?)";
        System.out.println("Attempting to insert order logs for " + items.size() + " items.");
        try (PreparedStatement ps = conn.prepareStatement(insertOrderLogSql)) {
            for (CartItem ci : items) {
                double lineTotal = ci.getQty() * ci.getPrice();
                ps.setInt(1, orderId);
                ps.setInt(2, ci.getProductId());
                ps.setInt(3, ci.getQty());
                ps.setDouble(4, ci.getPrice());
                ps.setDouble(5, lineTotal);
                ps.addBatch();
            }
            ps.executeBatch();
        }
    }

    private void clearSelectedCartItems(Connection conn, int userId, List<Integer> selectedItems) throws SQLException {
        if (selectedItems == null || selectedItems.isEmpty()) {
            return;
        }

        System.out.println("Attempting to clear " + selectedItems.size() + " selected cart items.");
        String clearSelectedCartSql = "DELETE FROM Ecommerce_Website.D_D_CART WHERE user_id = ? AND product_id IN (" +
                selectedItems.stream().map(id -> "?").collect(Collectors.joining(", ")) + ")";

        try (PreparedStatement ps = conn.prepareStatement(clearSelectedCartSql)) {
            ps.setInt(1, userId);
            for (int i = 0; i < selectedItems.size(); i++) {
                ps.setInt(i + 2, selectedItems.get(i));
            }
            ps.executeUpdate();
        }
    }
}


package servlets;

import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;

import com.google.gson.*;
import dao.ProductDao;
import model.Product;

@WebServlet("/ProductServlet")
public class ProductServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private ProductDao<?> productDao;
    private Gson gson;

    @Override
    public void init() throws ServletException {
        this.productDao = new ProductDao<>();
        this.gson = new GsonBuilder().setPrettyPrinting().create();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        response.setContentType("application/json");
        PrintWriter out = response.getWriter();

        String categoryIdParam = request.getParameter("category_id");
        String query = request.getParameter("query");
        String filter = request.getParameter("filter");

        Integer categoryId = null;
        if (categoryIdParam != null && !categoryIdParam.isEmpty()) {
            try {
                categoryId = Integer.parseInt(categoryIdParam);
            } catch (NumberFormatException e) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                out.print("{\"error\":\"Invalid category_id\"}");
                return;
            }
        }

        if (query != null) query = query.trim().replaceAll("[^a-zA-Z0-9 ]", "");

        List<Product> products = productDao.getFilteredProducts(categoryId, query, filter);
        out.print(gson.toJson(products));
        out.flush();
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doGet(request, response);
    }
}package servlets;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import dao.UserDao;
import model.User;

@WebServlet("/RegisterServlet")
public class RegisterServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String name = request.getParameter("fname");
        String email = request.getParameter("email");
        System.out.println("email"+email);
        String password = request.getParameter("password");
        String mobile = request.getParameter("phone");
        String address = request.getParameter("full_address");
        
        int pincode = 0; 
        try {
        	
            String pincodeStr = request.getParameter("pincode");
            if (pincodeStr != null && !pincodeStr.isEmpty()) {
                pincode = Integer.parseInt(pincodeStr);
                System.out.println("Pincode: "+pincode);
            }
        } catch (NumberFormatException e) {
            response.sendRedirect("register.html?error=Invalid pincode format.");
            return; 
        }

        User user = new User();
        user.setName(name);
        user.setEmail(email);
        user.setPassword(password);
        user.setMobile(mobile);
        user.setAddress(address);
        user.setPinCode(pincode);


        UserDao userDao = new UserDao();
        boolean success = userDao.registerUser(user);

        if (success) {
            response.sendRedirect("login.html?message=Registration successful! Please log in.");
        } else {
            response.sendRedirect("register.html?error=Registration failed. Please try again.");
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }
}package servlets;

import com.google.gson.JsonObject;
import dao.CartDao;
import dao.OrderDao;
import model.User;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/ReorderServlet")
public class ReorderServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private final OrderDao orderDao = new OrderDao();
    private final CartDao cartDao = new CartDao();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        HttpSession session = request.getSession(false);
        JsonObject jsonResponse = new JsonObject();

        if (session == null || session.getAttribute("user") == null) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            jsonResponse.addProperty("status", "error");
            jsonResponse.addProperty("message", "Not logged in.");
            response.getWriter().write(jsonResponse.toString());
            return;
        }

        User user = (User) session.getAttribute("user");
        try {
            int orderId = Integer.parseInt(request.getParameter("orderId"));
            cartDao.reorderItems(user.getId(), orderId);
            jsonResponse.addProperty("status", "ok");
        } catch (NumberFormatException e) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            jsonResponse.addProperty("status", "error");
            jsonResponse.addProperty("message", "Invalid order ID.");
        } catch (SQLException e) {
            log("Database error reordering items", e);
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            jsonResponse.addProperty("status", "error");
            jsonResponse.addProperty("message", "Internal server error.");
        }
        response.getWriter().write(jsonResponse.toString());
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Cart</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <style>
    .cart-check { width:18px; height:18px; position:relative; z-index:9999; cursor:pointer; pointer-events:auto; }
    .cart-row { cursor: pointer; }
  </style>

  
</head>

<body class="bg-gray-100">
  <div>
  <nav class="bg-green-600 text-white fixed w-full top-0 z-50 shadow-md">
    <div class="max-w-7xl mx-auto px-4 flex justify-between items-center h-16">
<ul class="text-2xl font-semibold">Shopping Center</ul>
      <ul class="flex space-x-6 items-center">
    <li><button id="nav-login" class="navbar-btn px-4 py-2 rounded-md hover:bg-yellow-300">Login</button></li>
    <li><button id="nav-register" class="navbar-btn px-4 py-2 rounded-md hover:bg-yellow-300">Register</button></li>
         <li class="relative">
           <button id="cart-link" class="relative hover:text-yellow-300 focus:outline-none">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-1.293 6.707A1 1 0 007.707 21h8.586a1 1 0 00.707-1.707L15 13H7z" />
               </svg>
               <span id="cart-badge" class="absolute -top-2 -right-3 bg-red-500 text-white rounded-full px-2 text-xs">0</span>
            </button>
        </li>
        <li class="relative group">
          <button id="category-dropdown-btn" class="hover:text-yellow-300 focus:outline-none">Category</button>
          <ul id="category-dropdown" class="absolute left-0 mt-2 w-40 bg-white text-green-700 rounded shadow-lg hidden z-50">
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="1">Mobiles</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="2">Laptops</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="3">TVs</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="4">Speakers</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="7">Cameras</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="8">Tablets</button></li>
          </ul>
        </li>
      </ul>
      <div class="ml-4 flex items-center">
        <button id="nav-back" class="navbar-btn px-4 py-2 rounded-md bg-gray-400 text-white hover:bg-gray-500 mr-2">Back</button>
        <button id="nav-logout" class="navbar-btn px-4 py-2 rounded-md bg-red-500 text-white hover:bg-red-600">Logout</button>
        
      </div>
      <button id="nav-profile" class="hover:text-yellow-300 focus:outline-none">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A9 9 0 1118.878 6.196 9 9 0 015.12 17.804zM15 11a3 3 0 11-6 0 3 3 0 016 0z" />
               </svg>
            </button>
    </div>
  </nav>
</div>
<div class="max-w-4xl mx-auto mt-20">
  <h1 class="text-2xl font-bold mb-4">Your Cart</h1>
  <div id="cart-container" class="bg-white p-4 rounded shadow">
    <p class="text-gray-500">Loading cart...</p>
  </div>
  <div class="mt-4 text-right">
    <button id="checkout-btn" class="bg-green-600 text-white px-4 py-2 rounded-md">Checkout</button>
  </div>
</div>

  <script>
   function renderCart(items) {

    if (!items || items.length === 0) {
        $('#cart-container').html('<p class="text-gray-500">Your cart is empty.</p>');
        $('#cart-badge').text('0');
        return;
    }
    

    let html = '<table class="w-full">';
    html += '<thead><tr><th></th><th>Product</th><th>Price</th><th>Qty</th><th>Total</th><th></th></tr></thead>';
    html += '<tbody>';
    let grand = 0;
    let totalItems = 0;
    
    items.forEach(it => {
        const total = (it.price * it.qty);
        grand += total;
        totalItems += it.qty; 
        html += `<tr class="border-b cart-row" data-id="${it.productId}">
            <td class="p-2 text-center"><input type="checkbox" class="cart-check" data-id="${it.productId}" ${it.checked ? 'checked' : ''}></td>
            <td class="p-2 flex items-center"><img src="${it.image}" style="width:60px;height:60px;object-fit:cover" class="mr-3">${it.name}</td>
            <td class="p-2">₹${it.price}</td>
            <td class="p-2">
              <button class="qty-decr bg-gray-200 px-2" data-id="${it.productId}">-</button>
              <span class="mx-2 qty-val" data-id="${it.productId}">${it.qty}</span>
              <button class="qty-incr bg-gray-200 px-2" data-id="${it.productId}">+</button>
            </td>
            <td class="p-2">₹${total}</td>
            <td class="p-2"><button class="remove bg-red-500 text-white px-3 py-1 rounded" data-id="${it.productId}">Remove</button></td>
          </tr>`;
    });
    html += '</tbody></table>';
    html += `<div class="mt-4 text-right font-bold">Grand Total: ₹${grand}</div>`;
    
    $('#cart-container').html(html);
    $('#cart-badge').text(totalItems);
}


 function loadCart() {
    $.getJSON("http://localhost:8080/Ecommerce_Website/CartServlet", function(data) {
        const urlparams = new URLSearchParams(window.location.search);
        const buynowId = urlparams.get("buyNowId");
        
        if (buynowId) {
            const buynowIdInt = parseInt(buynowId, 10);
            data.forEach(it => it.checked = it.productId === buynowIdInt);
        }
        
        renderCart(data);
    });
}
  



    $(document).ready(function () {
      loadCart();

      $(document).on('click', '.qty-incr', function () {
        const id = $(this).data('id');
        const span = $('.qty-val[data-id="' + id + '"]');
        let val = parseInt(span.text());
        val++;
        $.post('http://localhost:8080/Ecommerce_Website/CartServlet', { 
            action: 'update', 
            productId: id, 
            qty: val },
             function (data) { 
                renderCart(data);
             }, 'json');
      });

      $(document).on('click', '.qty-decr', function () {
        const id = $(this).data('id');
        const span = $('.qty-val[data-id="' + id + '"]');
        let val = parseInt(span.text());
        val = Math.max(0, val - 1);
        $.post('http://localhost:8080/Ecommerce_Website/CartServlet', { 
            action: 'update',
             productId: id,
              qty: val 
            }, 
            function (data) { 
                renderCart(data);
             }, 'json');
      });

      $(document).on('click', '.remove', function () {
        const id = $(this).data('id');
        $.post('http://localhost:8080/Ecommerce_Website/CartServlet', { 
            action: 'remove',
             productId: id }, 
             function (data) { 
                renderCart(data); 
            }, 'json');
      });

      $(document).on('change', '.cart-check', function (e) {
        e.stopPropagation();
        const id = $(this).data('id');
        const checked = $(this).is(':checked');
        $.post('CartServlet', { action: 'toggle', productId: id, checked: checked });
      });

      $(document).on('click', '.cart-row', function (e) {
        if ($(e.target).is('input') || $(e.target).is('button') || $(e.target).closest('button').length) return;
        const cb = $(this).find('.cart-check');
        cb.prop('checked', !cb.prop('checked'));
        cb.trigger('change');
      });


$('#checkout-btn').click(function() {
    const selectedItems = [];
    let grandTotal = 0;

    const checked = $('.cart-check:checked');

    if (checked.length === 0) {
        alert("Please select at least one item to checkout.");
        return;
    }

    checked.each(function() {
        const row = $(this).closest('.cart-row');
        const id = parseInt(row.data('id'), 10);
        const name = row.find('td:nth-child(2)').text().trim();
        const price = parseFloat(row.find('td:nth-child(3)').text().replace('₹','').trim());
        const qty = parseInt(row.find('.qty-val').text(), 10);
        const total = parseFloat(row.find('td:nth-child(5)').text().replace('₹','').trim());
        selectedItems.push({ productId: id, name: name, price: price, qty: qty, total: total });
        grandTotal += total;
    });

    localStorage.setItem('checkoutItems', JSON.stringify(selectedItems));
    window.location.href = '../Html/payment.html?amount=' + grandTotal.toFixed(2);
});

    });
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Login Page</title>
  <!-- <script src="https://cdn.tailwindcss.com"></script> -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
</head>
<body class="bg-gradient-to-br from-indigo-50 via-white to-indigo-100 min-h-screen flex items-center justify-center">
  
  <nav class="bg-green-600 text-white fixed w-full top-0 z-50 shadow-md">
    <div class="max-w-7xl mx-auto px-4 flex justify-between items-center h-16">
      <ul class="text-2xl font-semibold">Shopping Center</ul>
      <ul class="flex space-x-6 items-center">
        <li><button id="nav-login" class="navbar-btn px-4 py-2 rounded-md hover:bg-yellow-300">Login</button></li>
        <li><button id="nav-register" class="navbar-btn px-4 py-2 rounded-md hover:bg-yellow-300">Register</button></li>
        <li class="relative">
          <button id="cart-link" class="relative hover:text-yellow-300 focus:outline-none">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-1.293 6.707A1 1 0 007.707 21h8.586a1 1 0 00.707-1.707L15 13H7z" />
               </svg>
               <span id="cart-badge" class="absolute -top-2 -right-3 bg-red-500 text-white rounded-full px-2 text-xs">0</span>
            </button>
        </li>
        <li class="relative group">
          <button id="category-dropdown-btn" class="hover:text-blue-400 focus:outline-none">Category </button>
          <li class="relative group">
            <ul id="category-dropdown" class="absolute left-0 mt-2 w-40 bg-white text-green-700 rounded shadow-lg hidden z-50">
              <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-blue-100" data-cat="mobile">Mobiles</button></li>
              <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-blue-100" data-cat="tv">TVs</button></li>
              <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-blue-100" data-cat="laptop">Laptops</button></li>
              <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-blue-100" data-cat="camera">Cameras</button></li>
              <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-blue-100" data-cat="speaker">Speakers</button></li>
              <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-blue-100" data-cat="tablet">Tablets</button></li>
            </ul>
          </li>
        </ul>
        <ul><button id="nav-back" class="navbar-btn px-4 py-2 rounded-md bg-gray-400 text-white hover:bg-gray-500">Back</button></ul>
        <button id="nav-profile" class="hover:text-yellow-300 focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A9 9 0 1118.878 6.196 9 9 0 015.12 17.804zM15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
             </button>
      </div>

    </div>
    </nav>
    
    <div class="w-full max-w-md p-8 bg-white rounded-2xl shadow-xl border border-gray-200">
      <h1 class="text-3xl font-bold text-center text-indigo-700 mb-6">Login</h1>
      
      <form id="registrationForm" class="space-y-6" autocomplete="off"></form>
      
      <p class="text-center text-sm text-gray-500 mt-6">
        Don’t have an account?
        <a href="../Html/register.html" class="text-indigo-600 font-semibold hover:underline">Register here</a>
      </p>
    </div>
    
    <script src="../Jquery/login.js"></script>
</body> 
</html><!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Ecommerce Website</title>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
</head>
<style>
  .disabled-button {
    background-color: #9ca3af; 
    cursor: not-allowed;
}
</style>
<body class="bg-green-50">

  <nav class="bg-green-600 text-white fixed w-full top-0 z-50 shadow-md">
    <div class="max-w-7xl mx-auto px-4 flex justify-between items-center h-16">
<ul class="text-2xl font-semibold">Shopping Center</ul>
      <ul class="flex space-x-6 items-center">
    <li><button id="nav-login" class="navbar-btn px-4 py-2 rounded-md hover:bg-yellow-300">Login</button></li>
    <li><button id="nav-register" class="navbar-btn px-4 py-2 rounded-md hover:bg-yellow-300">Register</button></li>
         <li class="relative">
           <button id="cart-link" class="relative hover:text-yellow-300 focus:outline-none">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-1.293 6.707A1 1 0 007.707 21h8.586a1 1 0 00.707-1.707L15 13H7z" />
               </svg>
               <span id="cart-badge" class="absolute -top-2 -right-3 bg-red-500 text-white rounded-full px-2 text-xs">0</span>
            </button>
        </li>
        <li class="relative group">
          <button id="category-dropdown-btn" class="hover:text-yellow-300 focus:outline-none">Category</button>
          <ul id="category-dropdown" class="absolute left-0 mt-2 w-40 bg-white text-green-700 rounded shadow-lg hidden z-50">
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="1">Mobiles</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="2">Laptops</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="3">TVs</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="4">Speakers</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="7">Cameras</button></li>
            <li><button class="dropdown-category w-full text-left px-4 py-2 hover:bg-green-100" data-cat="8">Tablets</button></li>
          </ul>
        </li>
      </ul>
      <div class="ml-4 flex items-center">
        <!-- <button id="nav-back" class="navbar-btn px-4 py-2 rounded-md bg-gray-400 text-white hover:bg-gray-500 mr-2">Back</button> -->
        <button id="nav-logout" class="navbar-btn px-4 py-2 rounded-md bg-red-500 text-white hover:bg-red-600">Logout</button>
        
      </div>
      <button id="nav-profile" class="hover:text-yellow-300 focus:outline-none">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A9 9 0 1118.878 6.196 9 9 0 015.12 17.804zM15 11a3 3 0 11-6 0 3 3 0 016 0z" />
               </svg>
            </button>
    </div>
  </nav>

  <div class="mt-20 text-center">
    <h2 class="text-3xl font-bold text-green-700">Welcome to Ecommerce Website</h2>
    <p class="text-gray-600 mt-1">We specialize in Electronics</p>

    <div class="mt-4">
      <input id="search-input" type="text" placeholder="Search Items..." class="border p-2 rounded-md w-64">
      <button id="search-btn" class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700">Search</button>

      <div class="relative inline-block text-left">
            <button id="filter-btn" class="bg-yellow-500 text-white px-4 py-2 rounded-md hover:bg-yellow-600">Filter</button>
            <ul id="filter-options" class="absolute hidden mt-2 w-44 bg-white text-green-700 rounded shadow-lg z-50">
               <li><button class="filter-option w-full text-left px-4 py-2 hover:bg-green-100" data-type="low-high">Price: Low → High</button></li>
               <li><button class="filter-option w-full text-left px-4 py-2 hover:bg-green-100" data-type="high-low">Price: High → Low</button></li>
               <li><button class="filter-option w-full text-left px-4 py-2 hover:bg-green-100" data-type="rating">Top Rated</button></li>
            </ul>
         </div>
    </div>
  </div>
  
  

  <div id="product-list" class="max-w-7xl mx-auto mt-8">
    <p class="text-center text-gray-500">Loading products...</p>
  </div>

  <script>

    $(document).ready(function () {
      

      function setActiveNav(page) {
        $(".navbar-btn").removeClass("bg-blue-600 text-white");
        $("#nav-" + page).addClass("bg-blue-600 text-white");
      }
      $("#nav-login").click(function () { 
        window.location.href = "login.html"; 
      });
      $("#cart-link").click(function () { 
        window.location.href = "cart.html"; 
      });
      $("#nav-profile").click(function () { 
        window.location.href = "profile.html"; 
      });
      
      $("#nav-register").click(function () {
        window.location.href = "register.html";
      });
      $("#nav-products").click(function () { window.location.href = "index.html"; });
      
      if (window.location.pathname.includes("login.html")) setActiveNav("login");
      else if (window.location.pathname.includes("register.html")) setActiveNav("register");
      else if (window.location.pathname.includes("index.html")) setActiveNav("products");
      
      $("#nav-logout").click(function () {
          sessionStorage.removeItem("cart");
          sessionStorage.removeItem("isLoggedIn");
          sessionStorage.removeItem("userProfile");
          $("#cart-badge").text("0");
          alert("You have been logged out!");
          window.location.href = "login.html";
        });

    });
    $(document).ready(function () {

        $("#nav-login").click(() => window.location.href = "login.html");
        $("#nav-register").click(() => window.location.href = "register.html");
        $("#cart-link").click(() => window.location.href = "cart.html");
        $("#nav-profile").click(() => window.location.href = "profile.html");

        $("#nav-logout").click(function () {
          sessionStorage.removeItem("cart");
          sessionStorage.removeItem("isLoggedIn");
          sessionStorage.removeItem("userProfile");
          $("#cart-badge").text("0");
          alert("You have been logged out!");
          window.location.href = "login.html";
        });

        // --- Product Loading ---
        let lastCategoryId = null;

        function fetchAndShowProducts(categoryId = null, query = "", sortType = "") {
          let url = "http://localhost:8080/Ecommerce_Website/ProductServlet";
          let params = [];

          if (categoryId) params.push("category_id=" + categoryId);
          if (query) params.push("query=" + encodeURIComponent(query));
          if (sortType) params.push("filter=" + sortType);

          if (params.length > 0) url += "?" + params.join("&");

          $.ajax({
            url: url,
            type: "GET",
            dataType: "json",
            success: function (data) {
              if (data.length > 0) showProducts(data);
              else $("#product-list").html("<p class='text-center text-gray-500'>No products found.</p>");
            },
            error: function () {
              alert("Failed to load products.");
            },
          });
        }

        $(".dropdown-category").click(function () {
          lastCategoryId = $(this).data("cat");
          fetchAndShowProducts(lastCategoryId);
        });

        $("#filter-btn").click(() => $("#filter-options").toggle());
        $(document).on("click", function (e) {
          if (!$(e.target).closest("#filter-btn, #filter-options").length) $("#filter-options").hide();
        });

        $(document).on("click", ".filter-option", function () {
          const sortType = $(this).data("type");
          const query = $("#search-input").val().trim();
          fetchAndShowProducts(lastCategoryId, query, sortType);
        });

        $("#search-input").on("input", function () {
          const query = $(this).val().trim();
          fetchAndShowProducts(lastCategoryId, query);
        });


        function showProducts(list) {
          let html = '<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-8 mb-10">';
          list.forEach(p => {
            html += `
              <div class="bg-white p-4 rounded-lg shadow-md text-center">
                <img src="${p.image || 'https://via.placeholder.com/400x250'}" alt="${p.productName}" class="w-full h-48 object-cover mb-3">
                <h4 class="font-semibold text-gray-800">${p.productName}</h4>
                <div class="flex justify-center items-center mb-2">
                  ${renderStars(p.rating || 4)}
                  <span class="ml-2 text-yellow-600 font-semibold">${p.rating || 4}</span>
                </div>
                <p class="text-green-600 font-bold mt-2">₹${p.price}</p>
                <p class="text-gray-600 text-sm mb-2">${p.description}</p>
                <button class="add-cart bg-green-600 text-white px-4 py-2 rounded-md mt-3 hover:bg-green-700" data-id="${p.productId}">Add to Cart</button>
                <button class="buy-now bg-yellow-500 text-white px-4 py-2 rounded-md mt-3 ml-2 hover:bg-yellow-600" data-id="${p.productId}">Buy Now</button>
              </div>`;
          });
          html += '</div>';
          $("#product-list").html(html);
        }

        function renderStars(rating) {
          const fullStar = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline text-yellow-400" viewBox="0 0 20 20" fill="currentColor"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.966a1 1 0 00.95.69h4.175c.969 0 1.371 1.24.588 1.81l-3.38 2.455a1 1 0 00-.364 1.118l1.287 3.966c.3.921-.755 1.688-1.54 1.118l-3.38-2.455a1 1 0 00-1.175 0l-3.38 2.455c-.784.57-1.838-.197-1.539-1.118l1.287-3.966a1 1 0 00-.364-1.118L2.174 9.393c-.783-.57-.38-1.81.588-1.81h4.175a1 1 0 00.95-.69l1.286-3.966z" /></svg>';
          return fullStar.repeat(Math.round(rating));
        }

        fetchAndShowProducts();
    
    
    
    function showProducts(list) {
      let html = "";
      const chunkSize = 4;
      for (let i = 0; i < list.length; i += chunkSize) {
        html += '<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-8 mb-10">';
          let row = list.slice(i, i + chunkSize);
          html += row
          .map(
            (p) => `
            <div class="bg-white p-4 rounded-lg shadow-md text-center">
              <img src="${p.imageUrl || 'https://via.placeholder.com/400x250?text=No+Image'}" alt="${p.productName}" style="width:400px;height:250px;object-fit:cover;" class="mb-3 mx-auto">
              <h4 class="font-semibold text-gray-800">${p.productName}</h4>
              <div class="flex justify-center items-center mb-2">
                ${renderStars(p.stars || 4)}
                <span class="ml-2 text-yellow-600 font-semibold">${p.stars || 4}</span>
              </div>
              <p class="text-green-600 font-bold mt-2">₹${p.price}</p>
              <p class="text-gray-600 text-sm mb-2">${p.description}</p>
              <button class="add-cart bg-green-600 text-white px-4 py-2 rounded-md mt-3 hover:bg-green-700"
              data-id="${p.productId}"
              data-name="${p.productName}"
              data-price="${p.price}"
              data-image="${p.image || p.imageUrl || 'https://via.placeholder.com/100'}">
              Add to Cart
              </button>
              <button class="buy-now bg-yellow-500 text-white px-4 py-2 rounded-md mt-3 ml-2 hover:bg-yellow-600" data-id="${p.productId}">
                Buy Now
                </button>
                </div>
                `
              )
            .join("");
            

            
            $(document).ready(function() {
              
              
              $(document).on("click", ".filter-option", function () {
                const sortType = $(this).data("type");
                
                const categoryId = lastCategoryId; 
                const query = $("#search-input").val().trim(); 
                
                fetchAndShowProducts(categoryId, query, sortType);
              });
              
              
              $("#filter-btn").click(function () {
                $("#filter-options").toggle();
              });
              
              
              $(document).on("click", function(event) {
                if (!$(event.target).closest(".relative.inline-block").length) {
                  $("#filter-options").hide();
                }
              });
              
              
            });
            
            
            
            
            $(document).on("click", function(event) {
              if (!$(event.target).closest(".relative.inline-block").length) {
                $("#filter-options").hide();
              }
            });
            
            
            
            function renderStars(rating) {
              const fullStar = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline text-yellow-400" viewBox="0 0 20 20" fill="currentColor"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.966a1 1 0 00.95.69h4.175c.969 0 1.371 1.24.588 1.81l-3.38 2.455a1 1 0 00-.364 1.118l1.287 3.966c.3.921-.755 1.688-1.54 1.118l-3.38-2.455a1 1 0 00-1.175 0l-3.38 2.455c-.784.57-1.838-.197-1.539-1.118l1.287-3.966a1 1 0 00-.364-1.118L2.174 9.393c-.783-.57-.38-1.81.588-1.81h4.175a1 1 0 00.95-.69l1.286-3.966z" /></svg>';
              const halfStar = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline text-yellow-400" viewBox="0 0 20 20" fill="currentColor"><path d="M10 15.27L16.18 18l-1.64-7.03L20 7.24l-7.19-.61L10 0 7.19 6.63 0 7.24l5.46 3.73L3.82 18z" /></svg>';
              let html = '';
              let full = Math.floor(rating);
              let half = rating % 1 >= 0.5 ? 1 : 0;
              for (let i = 0; i < full; i++) html += fullStar;
              if (half) html += halfStar;
              for (let i = full + half; i < 5; i++) html += '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline text-gray-300" viewBox="0 0 20 20" fill="currentColor"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.966a1 1 0 00.95.69h4.175c.969 0 1.371 1.24.588 1.81l-3.38 2.455a1 1 0 00-.364 1.118l1.287 3.966c.3.921-.755 1.688-1.54 1.118l-3.38-2.455a1 1 0 00-1.175 0l-3.38 2.455c-.784.57-1.838-.197-1.539-1.118l1.287-3.966a1 1 0 00-.364-1.118L2.174 9.393c-.783-.57-.38-1.81.588-1.81h4.175a1 1 0 00.95-.69l1.286-3.966z" /></svg>';
              return html;
            }
            html += '</div>';
          }
          $("#product-list").html(html);
        }
        
      });


 
      $("#category-dropdown-btn").click(function (e) {
        e.stopPropagation();
        $("#category-dropdown").toggle();
      });

      $(document).on("click", function () {
        $("#category-dropdown").hide();
      });



      function refreshBadge() {
        $.get('http://localhost:8080/Ecommerce_Website/CartServlet', function (data) {
          let total = 0; data.forEach(function (it) { total += it.qty; });
          $('#cart-badge').text(total);
        }, 'json');
      }
      refreshBadge();

      $(document).on("click", ".add-cart", function () {
        const id = $(this).data('id');
        const qty = 1;
        $.post('http://localhost:8080/Ecommerce_Website/CartServlet', { action: 'add', productId: id, qty: qty }, function (data) {
          let total = 0; data.forEach(function (it) { total += it.qty; });
          $('#cart-badge').text(total);
          alert('Added to cart!');
        }, 'json');
      });


  </script>

</body>
</html>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Secure Payment - Ecommerce</title>


<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<style>
body {
  background-color: #f9fafb;
  font-family: 'Inter', sans-serif;
}
.payment-card {
  background-color: white;
  border-radius: 16px;
  box-shadow: 0 6px 20px rgba(0,0,0,0.08);
  padding: 30px;
  max-width: 450px;
  margin: 40px auto;
}
.hidden { display: none; }
.loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #22c55e;
  border-radius: 50%;
  width: 28px;
  height: 28px;
  animation: spin 1s linear infinite;
  display: inline-block;
  margin-right: 10px;
}
@keyframes spin { 100% { transform: rotate(360deg); } }
</style>
</head>

<body>
<div class="payment-card">
  <h2 class="text-2xl font-semibold text-gray-800 mb-2 text-center">Secure Checkout</h2>
  <p class="text-sm text-gray-500 text-center mb-6">Choose your payment method</p>


  <div class="flex justify-around mb-4 border-b">
    <button id="tabCard" class="py-2 px-4 font-medium text-green-600 border-b-2 border-green-600">Card</button>
    <button id="tabUpi" class="py-2 px-4 font-medium text-gray-500 hover:text-green-600">UPI</button>
  </div>


  <form id="cardForm">
    <label class="block text-sm font-medium text-gray-700 mb-1">Cardholder Name</label>
    <input id="cardName" class="w-full mb-3 p-2 border rounded" type="text" placeholder="e.g. Mahesh Kumar" required>

    <label class="block text-sm font-medium text-gray-700 mb-1">Card Number</label>
    <input id="cardNumber" class="w-full mb-3 p-2 border rounded" maxlength="19" placeholder="4242 4242 4242 4242" required>

    <div class="grid grid-cols-3 gap-2 mb-3">
      <input id="expMonth" class="p-2 border rounded" maxlength="2" placeholder="MM" required>
      <input id="expYear" class="p-2 border rounded" maxlength="4" placeholder="YYYY" required>
      <input id="cvv" class="p-2 border rounded" maxlength="3" placeholder="CVV" required>
    </div>

    <label class="flex items-center space-x-2 mb-4">
      <input type="checkbox" id="saveCard" class="accent-green-600">
      <span class="text-sm text-gray-600">Save this card for future</span>
    </label>
  </form>


  <form id="upiForm" class="hidden">
    <label class="block text-sm font-medium text-gray-700 mb-1">UPI ID</label>
    <input id="upiId" class="w-full mb-3 p-2 border rounded" placeholder="yourname@upi" required>

    <div class="flex space-x-3 mt-2">
      <img src="https://upload.wikimedia.org/wikipedia/commons/3/3b/Google_Pay_Logo.svg" alt="GPay" class="h-6">
      <img src="https://upload.wikimedia.org/wikipedia/commons/3/3a/PhonePe-Logo.svg" alt="PhonePe" class="h-6">
      <img src="https://upload.wikimedia.org/wikipedia/en/2/2b/Paytm_logo.svg" alt="Paytm" class="h-6">
    </div>
  </form>

  <div class="mt-6 flex items-center justify-between border-t pt-3">
    <div class="text-lg font-medium text-gray-800">Total Amount</div>
    <div id="amountText" class="text-xl font-bold text-green-700">₹0.00</div>
  </div>

  <button id="payBtn" class="w-full mt-5 bg-green-600 hover:bg-green-700 text-white py-3 rounded font-medium">
    Pay Now
  </button>


  <div id="loaderBox" class="hidden mt-4 text-center">
    <div class="loader"></div> <span>Processing payment...</span>
  </div>
  <div id="msgBox" class="mt-4 text-center text-sm font-medium"></div>
</div>

<script>
function getParameterByName(name) {
  const regex = new RegExp('[?&]' + name + '=([^&#]*)');
  const results = regex.exec(window.location.href);
  return results ? decodeURIComponent(results[1]) : null;
}

// Correct logic to retrieve selected product IDs from local storage
function getSelectedProductIds() {
  const checkoutItemsJson = localStorage.getItem('checkoutItems');
  if (!checkoutItemsJson) {
    return [];
  }
  const checkoutItems = JSON.parse(checkoutItemsJson);
  return checkoutItems.map(item => item.productId);
}

$(document).ready(function(){
  const amount = parseFloat(getParameterByName('amount')) || 0.00;
  $('#amountText').text('₹ ' + amount.toFixed(2));

  $('#tabCard').click(() => {
    $('#tabCard').addClass('text-green-600 border-green-600').removeClass('text-gray-500');
    $('#tabUpi').removeClass('text-green-600 border-green-600').addClass('text-gray-500');
    $('#cardForm').removeClass('hidden');
    $('#upiForm').addClass('hidden');
  });

  $('#tabUpi').click(() => {
    $('#tabUpi').addClass('text-green-600 border-green-600').removeClass('text-gray-500');
    $('#tabCard').removeClass('text-green-600 border-green-600').addClass('text-gray-500');
    $('#upiForm').removeClass('hidden');
    $('#cardForm').addClass('hidden');
  });

  $('#payBtn').click(function(e){
    e.preventDefault();
    const isCard = !$('#cardForm').hasClass('hidden');
    
    // Call the function to get the actual selected product IDs
    const selectedProductIds = getSelectedProductIds();
    
    let payload = { 
      amount: amount,
      selectedItems: selectedProductIds // Now the array is populated
    };

    if (isCard) {
      const num = $('#cardNumber').val().replace(/\D/g, '');
      if (num.length < 12) return showMsg("Invalid card number", false);
      payload.method = 'card';
      payload.cardHolder = $('#cardName').val().trim();
      payload.cardLast4 = num.slice(-4);
      payload.expMonth = $('#expMonth').val();
      payload.expYear = $('#expYear').val();
    } else {
      const upi = $('#upiId').val().trim();
      if (!upi.includes('@')) return showMsg("Enter valid UPI ID", false);
      payload.method = 'upi';
      payload.upiId = upi;
    }

    $('#loaderBox').removeClass('hidden');
    $('#payBtn').prop('disabled', true);

    $.ajax({
      url: 'http://localhost:8080/Ecommerce_Website/PaymentServlet',  
      type: 'POST',
      contentType: 'application/json',
      data: JSON.stringify(payload),
      success: function(resp){
        $('#loaderBox').addClass('hidden');
        if(resp.status === 'ok'){
          showMsg('Payment Successful! Order ID: ' + resp.orderId, true);
          setTimeout(()=>{
              localStorage.removeItem('checkoutItems'); // Clear the storage after successful checkout
              window.location.href='../Html/orderhistory.html'
          }, 1500);
        } else {
          showMsg( resp.message, false);
        }
      },
      error: function(){
        $('#loaderBox').addClass('hidden');
        showMsg('Server Error while processing payment', false);
      },
      complete: function(){
        $('#payBtn').prop('disabled', false);
      }
    });
  });

  function showMsg(msg, success){
    $('#msgBox').text(msg)
      .removeClass('text-red-600 text-green-600')
      .addClass(success ? 'text-green-600' : 'text-red-600');
  }
});
</script>

</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
 <title>User Profile</title>
 <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
 <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<style>
 .disabled-input {
 background-color: #f3f4f6;
 cursor: not-allowed;
}
#profile-photo {
 width: 120px;
height: 120px;
 border-radius: 50%;
object-fit: cover;
 margin: 0 auto;
 display: block;
border: 2px solid #ddd;
 }
 </style>
</head>

<body class="bg-gray-100 min-h-screen flex items-center justify-center">
 <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-lg">
 <h1 class="text-3xl font-bold mb-6 text-center text-gray-800">User Profile</h1>

 <div class="text-center mb-4">
 <img id="profile-photo" src="https://via.placeholder.com/120" alt="Profile Photo">
 <input type="file" id="photo-upload" accept="image/*" class="mt-2 hidden">
 <button id="change-photo-btn" class="mt-2 bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-1 px-3 rounded text-sm">Change Photo</button>
 </div>

 <form id="profile-form">
<div class="mb-4">
<label class="block text-gray-700 text-sm font-bold mb-2" for="fullname">Full Name</label>
 <input class="shadow border rounded w-full py-2 px-3 text-gray-700 disabled-input" id="fullname" name="fullname" type="text" readonly>
 </div>

 <div class="mb-4">
<label class="block text-gray-700 text-sm font-bold mb-2" for="email">Email</label>
<input class="shadow border rounded w-full py-2 px-3 text-gray-700 disabled-input" id="email" name="email" type="email" readonly>
 </div>

<div class="mb-4">
<label class="block text-gray-700 text-sm font-bold mb-2" for="phone">Phone</label>
<input class="shadow border rounded w-full py-2 px-3 text-gray-700" id="phone" name="phone" type="text" disabled>
</div>

 <div class="mb-4">
<label class="block text-gray-700 text-sm font-bold mb-2" for="address">Address</label>
 <textarea class="shadow border rounded w-full py-2 px-3 text-gray-700" id="address" name="address" rows="3" disabled></textarea>
 </div>

<div class="mb-6">
 <label class="block text-gray-700 text-sm font-bold mb-2" for="pincode">Pincode</label>
<input class="shadow border rounded w-full py-2 px-3 text-gray-700" id="pincode" name="pincode" type="text" disabled>
 </div>

<div class="flex items-center justify-between">
 <button id="edit-btn" type="button" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Edit Profile</button>
 <button id="save-btn" type="submit" class="hidden bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Save</button>
 <button id="cancel-btn" type="button" class="hidden bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Cancel</button>
</div>
</form>

 <div id="change-password-section" class="hidden mt-6 border-t pt-4">
<h2 class="text-xl font-semibold mb-4 text-gray-700">Change Password</h2>
<form id="password-form">
 <div class="mb-3">
<label class="block text-gray-700 text-sm font-bold mb-2">New Password</label>
 <input type="password" id="new-password" class="w-full border rounded py-2 px-3 mb-2" placeholder="Enter new password">
 </div>

<div class="mb-3">
 <label class="block text-gray-700 text-sm font-bold mb-2">Confirm Password</label>
<input type="password" id="confirm-password" class="w-full border rounded py-2 px-3" placeholder="Confirm password">
 </div>

<p id="password-error" class="text-red-500 text-sm mb-3 hidden">Passwords do not match!</p>

<div class="flex justify-end space-x-2">
<button id="update-password-btn" type="button" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Update Password</button>
 <button id="cancel-password-btn" type="button" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Cancel</button>
 </div>
 </form>
</div>

      <div class="mt-6 space-y-3">
         <button id="change-password-btn" class="bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded w-full">Change Password</button>
         <button id="order-history-btn" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded w-full">View Order History</button>
      </div>
   </div>

   <script>
      let userData;

      function fetchUserData() {
         $.ajax({
            url: 'http://localhost:8080/Ecommerce_Website/ProfileServlet',
            type: 'GET',
            dataType: 'json',
            success: function (user) {
               userData = user;
               $('#fullname').val(user.name);
               $('#email').val(user.email);
               $('#phone').val(user.mobile);
               $('#address').val(user.address);
               $('#pincode').val(user.pinCode);
            },
            error: function () {
               alert('Error fetching user data.');
            }
         });
      }


      $('#edit-btn').on('click', function () {
         $('#profile-form input, #profile-form textarea').prop('disabled', false).removeClass('disabled-input');
         $('#fullname, #email').prop('readonly', true).addClass('disabled-input');
         $('#edit-btn').addClass('hidden');
         $('#save-btn, #cancel-btn').removeClass('hidden');
      });

      $('#cancel-btn').on('click', function () {
         $('#profile-form input, #profile-form textarea').prop('disabled', true).addClass('disabled-input');
         $('#edit-btn').removeClass('hidden');
         $('#save-btn, #cancel-btn').addClass('hidden');
         $('#fullname').val(userData.name);
         $('#phone').val(userData.mobile);
         $('#address').val(userData.address);
         $('#pincode').val(userData.pinCode);
      });

      $('#profile-form').on('submit', function (e) {
         e.preventDefault();
         const updatedData = {
            name: $('#fullname').val(),
            phone: $('#phone').val(),
            address: $('#address').val(),
            pincode: $('#pincode').val()
         };
         $.ajax({
            url: 'http://localhost:8080/Ecommerce_Website/ProfileServlet',
            type: 'POST',
            data: updatedData,
            dataType: 'json',
            success: function (response) {
               if (response.status === 'success') {
                  alert('Profile updated successfully!');
                  fetchUserData();
                  $('#cancel-btn').click();
               } else {
                  alert('Error updating profile: ' + response.message);
               }
            },
            error: function () {
               alert('Server error updating profile.');
            }
         });
      });

    $('#change-password-btn').on('click', function () {
window.location.href = '../Html/changepassword.html';
});


      $('#cancel-password-btn').on('click', function () {
         $('#change-password-section').slideUp(300);
         $('#new-password, #confirm-password').val('');
         $('#password-error').addClass('hidden');
      });


$('#update-password-btn').on('click', function () {
    const newPass = $('#new-password').val().trim();
    const confirmPass = $('#confirm-password').val().trim();

    if (newPass === '' || confirmPass === '') {
        alert('Please fill all fields.');
        return;
    }

    if (newPass.length < 6) {
        alert('Password must be at least 6 characters.');
        return;
    }

    if (newPass !== confirmPass) {
        $('#password-error').removeClass('hidden');
        return;
    }

    $('#password-error').addClass('hidden');

    $.ajax({
        url: 'http://localhost:8080/Ecommerce_Website/ChangeServlet',
        type: 'POST',
        data: { 
            newPassword: newPass,
            confirmPassword: confirmPass
        },
        dataType: 'text',
        success: function (res) {

            if (res.includes("Password changed successfully!")) {
                alert('Password updated successfully!');
                $('#change-password-section').slideUp(300);
                $('#new-password, #confirm-password').val('');
            } else {
                alert(res.trim()); 
            }
        },
        error: function () {
            alert('Server error updating password.');
        }
    });
});




      $('#change-photo-btn').on('click', function () {
         $('#photo-upload').click();
      });

      $('#photo-upload').on('change', function (e) {
         const file = e.target.files[0];
         if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
               $('#profile-photo').attr('src', e.target.result);
            };
            reader.readAsDataURL(file);
         }
      });
      $('#order-history-btn').on('click', function () {
         window.location.href = '../Html/orderhistory.html';
      });

      fetchUserData();
   </script>
</body>
</html>





------------

package servlets;

import dao.AdminDao;
import model.Admin;
import model.Product;
import model.User;
import com.google.gson.Gson;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

@WebServlet("/AdminServlet")
public class AdminServlet extends HttpServlet {
    private final AdminDao dao = new AdminDao();
    private final Gson gson = new Gson();

    protected void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException {
        String action = req.getParameter("action");
        res.setContentType("application/json");

        try {
            switch (action) {
                case "login":
                    String username = req.getParameter("username");
                    String password = req.getParameter("password");
                    Admin admin = dao.login(username, password);
                    if (admin != null) {
                        req.getSession().setAttribute("admin", admin);
                        res.getWriter().write("{\"status\":\"success\"}");
                    } else res.getWriter().write("{\"status\":\"fail\"}");
                    break;

                case "listUsers":
                    List<User> users = dao.getAllUsers();
                    res.getWriter().write(gson.toJson(users));
                    break;

                case "deleteUser":
                    int uid = Integer.parseInt(req.getParameter("userId"));
                    dao.deleteUser(uid);
                    res.getWriter().write("{\"status\":\"ok\"}");
                    break;

                case "toggleStatus":
                    int userId = Integer.parseInt(req.getParameter("userId"));
                    boolean active = Boolean.parseBoolean(req.getParameter("active"));
                    dao.updateUserStatus(userId, active);
                    res.getWriter().write("{\"status\":\"ok\"}");
                    break;

                case "listProducts":
                    List<Product> products = dao.getAllProducts();
                    res.getWriter().write(gson.toJson(products));
                    break;

                case "addProduct":
                    Product p = new Product(
                        Integer.parseInt(req.getParameter("categoryId")),
                        req.getParameter("productName"),
                        req.getParameter("description"),
                        Double.parseDouble(req.getParameter("price")),
                        Integer.parseInt(req.getParameter("stock")),
                        req.getParameter("image")
                    );
                    dao.addProduct(p);
                    res.getWriter().write("{\"status\":\"ok\"}");
                    break;

                case "deleteProduct":
                    int pid = Integer.parseInt(req.getParameter("productId"));
                    dao.deleteProduct(pid);
                    res.getWriter().write("{\"status\":\"ok\"}");
                    break;

                default:
                    res.getWriter().write("{\"error\":\"Unknown action\"}");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            res.getWriter().write("{\"error\":\"" + e.getMessage() + "\"}");
        }
    }
}package model;

public class Admin {
    private int id;
    private String fullname;
    private String username;
    private String email;

    public Admin(int id, String fullname, String username, String email) {
        this.id = id;
        this.fullname = fullname;
        this.username = username;
        this.email = email;
    }
    public Admin() {}

    // getters and setters
}package dao;

import model.User;
import model.Product;
import model.Admin;
import utils.DBUtils;
import java.sql.*;
import java.util.*;

public class AdminDao {

    public Admin login(String username, String password) throws SQLException {
        String sql = "SELECT * FROM Ecommerce_Website.M_S_ADMIN WHERE username=? AND password=?";
        try (Connection c = DBUtils.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setString(2, password);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Admin(rs.getInt("admin_id"), rs.getString("fullname"), rs.getString("username"), rs.getString("email"));
                }
            }
        }
        return null;
    }

    public List<User> getAllUsers() throws SQLException {
        List<User> list = new ArrayList<>();
        String sql = "SELECT * FROM Ecommerce_Website.M_S_USER";
        try (Connection c = DBUtils.getConnection();
             PreparedStatement ps = c.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                User u = new User();
                u.setId(rs.getInt("user_id"));
                u.setName(rs.getString("fullname"));
                u.setEmail(rs.getString("email"));
                u.setMobile(rs.getString("phone"));
                u.setAddress(rs.getString("address"));
                u.setPinCode(rs.getInt("pincode"));
                u.setPassword(rs.getString("password"));
                list.add(u);
            }
        }
        return list;
    }

    public boolean deleteUser(int userId) throws SQLException {
        String sql = "DELETE FROM Ecommerce_Website.M_S_USER WHERE user_id=?";
        try (Connection c = DBUtils.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, userId);
            return ps.executeUpdate() > 0;
        }
    }

    public boolean updateUserStatus(int userId, boolean active) throws SQLException {
        String sql = "UPDATE Ecommerce_Website.M_S_USER SET status=? WHERE user_id=?";
        try (Connection c = DBUtils.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setBoolean(1, active);
            ps.setInt(2, userId);
            return ps.executeUpdate() > 0;
        }
    }

    public List<Product> getAllProducts() throws SQLException {
        return new ProductDao<>().getAllProducts();
    }

    public boolean addProduct(Product p) throws SQLException {
        String sql = "INSERT INTO Ecommerce_Website.M_S_DATAS(category_id, product_name, description, price, stock, image) VALUES(?,?,?,?,?,?)";
        try (Connection c = DBUtils.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, p.getCategoryId());
            ps.setString(2, p.getProductName());
            ps.setString(3, p.getDescription());
            ps.setDouble(4, p.getPrice());
            ps.setInt(5, p.getStock());
            ps.setString(6, p.getImageUrl());
            return ps.executeUpdate() > 0;
        }
    }

    public boolean updateProduct(Product p) throws SQLException {
        String sql = "UPDATE Ecommerce_Website.M_S_DATAS SET category_id=?, product_name=?, description=?, price=?, stock=?, image=? WHERE product_id=?";
        try (Connection c = DBUtils.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, p.getCategoryId());
            ps.setString(2, p.getProductName());
            ps.setString(3, p.getDescription());
            ps.setDouble(4, p.getPrice());
            ps.setInt(5, p.getStock());
            ps.setString(6, p.getImageUrl());
            ps.setInt(7, p.getProductId());
            return ps.executeUpdate() > 0;
        }
    }

    public boolean deleteProduct(int productId) throws SQLException {
        String sql = "DELETE FROM Ecommerce_Website.M_S_DATAS WHERE product_id=?";
        try (Connection c = DBUtils.getConnection();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, productId);
            return ps.executeUpdate() > 0;
        }
    }
}CREATE TABLE M_S_ADMIN (
  admin_id INT IDENTITY PRIMARY KEY,
  username VARCHAR(50) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  fullname VARCHAR(100),
  email VARCHAR(100)
);

ALTER TABLE M_S_USER ADD status BIT DEFAULT 1; -- 1 = active, 0 = deactivated<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <style>
    body { font-family: 'Inter', sans-serif; }
    .sidebar { min-height: 100vh; }
    .sidebar-btn { display:block; width:100%; text-align:left; padding:10px 16px; border-radius:8px; }
    .sidebar-btn:hover, .active-btn { background-color:#16a34a; color:white; }
  </style>
</head>

<body class="bg-gray-100">

  <!-- Navbar -->
  <nav class="bg-green-600 text-white shadow-md fixed w-full top-0 z-50">
    <div class="flex justify-between items-center px-6 h-14">
      <h1 class="text-2xl font-semibold">E-Commerce Admin Panel</h1>
      <div class="flex items-center space-x-4">
        <span id="adminName" class="text-white font-medium">Admin Mahesh</span>
        <button id="logoutBtn" class="bg-red-500 px-3 py-1 rounded hover:bg-red-600">Logout</button>
      </div>
    </div>
  </nav>

  <!-- Layout Wrapper -->
  <div class="flex pt-14">
    
    <!-- Sidebar -->
    <aside class="sidebar bg-white w-64 border-r shadow-md">
      <div class="p-4 border-b">
        <h2 class="text-lg font-bold text-green-700">Dashboard Menu</h2>
      </div>
      <nav class="mt-2">
        <button class="sidebar-btn active-btn" id="admin-profile">👤 Admin Profile</button>
        <button class="sidebar-btn" id="view-products">📦 View Products</button>
        <button class="sidebar-btn" id="user-details">👥 User Details</button>
        <button class="sidebar-btn" id="logout-side">🚪 Logout</button>
      </nav>
    </aside>

    <!-- Main Content -->
    <main id="content-area" class="flex-1 p-8">
      <h2 class="text-2xl font-bold text-green-700 mb-4">Welcome to Admin Dashboard</h2>
      <p class="text-gray-600">Select an option from the left to manage your e-commerce system.</p>
    </main>
  </div>

  <!-- jQuery Logic -->
  <script>
    function loadContent(title, html) {
      $('#content-area').html('<h2 class="text-2xl font-bold text-green-700 mb-4">' + title + '</h2>' + html);
    }

    $('.sidebar-btn').click(function() {
      $('.sidebar-btn').removeClass('active-btn');
      $(this).addClass('active-btn');
    });

    $('#admin-profile').click(function(){
      loadContent('Admin Profile', `
        <div class="bg-white p-6 rounded shadow-md max-w-lg">
          <h3 class="text-xl font-semibold mb-2">Admin Details</h3>
          <p><strong>Name:</strong> Mahesh Admin</p>
          <p><strong>Email:</strong> admin@shop.com</p>
          <p><strong>Role:</strong> Super Admin</p>
        </div>`);
    });

    $('#view-products').click(function(){
      loadContent('Products', `
        <table class="min-w-full bg-white rounded shadow-md">
          <thead class="bg-green-100">
            <tr><th class="p-3 text-left">Product</th><th class="p-3">Price</th><th class="p-3">Stock</th><th class="p-3">Action</th></tr>
          </thead>
          <tbody>
            <tr class="border-t"><td class="p-3">iPhone 15 Pro</td><td>₹1,29,999</td><td>15</td><td><button class="bg-red-500 text-white px-3 py-1 rounded">Delete</button></td></tr>
            <tr class="border-t"><td class="p-3">Dell XPS 13</td><td>₹89,000</td><td>10</td><td><button class="bg-red-500 text-white px-3 py-1 rounded">Delete</button></td></tr>
            <tr class="border-t"><td class="p-3">Sony Bravia TV</td><td>₹59,000</td><td>7</td><td><button class="bg-red-500 text-white px-3 py-1 rounded">Delete</button></td></tr>
          </tbody>
        </table>`);
    });

    $('#user-details').click(function(){
      loadContent('User Details', `
        <table class="min-w-full bg-white rounded shadow-md">
          <thead class="bg-green-100">
            <tr><th class="p-3 text-left">Name</th><th class="p-3">Email</th><th class="p-3">Status</th><th class="p-3">Action</th></tr>
          </thead>
          <tbody>
            <tr class="border-t"><td class="p-3">Mahesh Kumar</td><td>mahesh@example.com</td><td>Active</td><td><button class="bg-red-500 text-white px-3 py-1 rounded">Delete</button></td></tr>
            <tr class="border-t"><td class="p-3">Priya Devi</td><td>priya@example.com</td><td>Inactive</td><td><button class="bg-green-500 text-white px-3 py-1 rounded">Activate</button></td></tr>
          </tbody>
        </table>`);
    });

    $('#logoutBtn, #logout-side').click(function(){
      if(confirm('Are you sure you want to logout?')){
        window.location.href = '../Html/admin_login.html';
      }
    });
  </script>

</body>
</html>

,----------












